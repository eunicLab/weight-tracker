{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["myLineChart","LineGraph","chartRef","React","createRef","buildChart","myChartRef","current","getContext","props","data","average","labels","destroy","Chart","type","global","Ldate","datasets","label","Lweight","backgroundColor","allGoalInputs","options","responsive","legend","position","allInputs","allWeightInputs","allDateInputs","counter","currentWeight","state","formStatus","weightInput","DateInput","goalInput","chartData","goalFormStatus","todos","handleAddForm","bind","handleOK","handleCancel","handleWeight","handleDate","handleGoal","handleGoalOk","handleGoalButton","axios","get","then","response","length","sort","a","b","Date","date","setState","i","weight","goal","console","log","this","event","preventDefault","id","post","res","window","location","alert","target","value","upDatedList","put","_id","className","onClick","name","onChange","placeholder","classes","graphContainer","ref","Math","pow","PureComponent","Boolean","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.27e8c573.chunk.js","sourcesContent":["import React, { PureComponent } from 'react'\nimport Chart from \"chart.js\";\nimport classes from \"./App.css\";\nimport axios from 'axios';\n\n\n\nlet myLineChart;\n\nexport default class LineGraph extends PureComponent {\n    chartRef = React.createRef();\n\n\n\n    constructor(){\n    super()\n    global.Lweight = [] \n    global.Ldate =[]\n    global.allInputs=[]\n    global.allWeightInputs =[]\n    global.allGoalInputs =[]\n    global.allDateInputs =[]\n    global.counter =0\n    global.currentWeight=\"\"\n   \n\n\n    this.state ={\n                  formStatus:\"noDisplay\",\n                  weightInput:\"\",\n                  DateInput:\"\",\n                  goalInput:\"\",\n                  chartData:{},\n                  goalFormStatus:\"noDisplay\",\n                  todos:\"\",\n                  currentWeight:\"\",\n\n\n                }\n\n\n    this.handleAddForm = this.handleAddForm.bind(this)\n    this.handleOK = this.handleOK.bind(this)\n    this.handleCancel = this.handleCancel.bind(this)\n    this.handleWeight = this.handleWeight.bind(this)\n    this.handleDate = this.handleDate.bind(this)\n    this.handleGoal = this.handleGoal.bind(this)\n    this.handleGoalOk = this.handleGoalOk.bind(this)\n    this.handleGoalButton=this.handleGoalButton.bind(this)\n  }\n\n\n\n\ncomponentDidMount() {\n\n   axios.get('https://warm-inlet-95424.herokuapp.com/api/stuff',)\n\n\n.then(response=>{ \n\n    if(response.data.length>0) {\n\n    response.data.sort(function(a, b){\n    var dateA=new Date(a.date), dateB=new Date(b.date)\n    return dateA-dateB //sort by date ascending\n})\n\n}\n\n\n\nthis.setState({todos:response.data,})\n\n\n\n let i=0\nfor (i=0;i<this.state.todos.length;i++){\n    global.Lweight[i]=this.state.todos[i].weight\n    global.Ldate[i] = this.state.todos[i].date\n    global.allGoalInputs[i] = this.state.todos[this.state.todos.length-1].goal\n  }\n\nthis.setState({\n\n  \n  goalInput:this.state.todos[this.state.todos.length-1].goal,\n currentWeight:this.state.todos[this.state.todos.length-1].weight\n})\n\n\n\n\n   this.buildChart();\n\n    console.log(global.Lweight)\n    console.log(global.Ldate)\n  \n })\n}\n\n\n\n     \n    \n\n    componentDidUpdate() {\n        this.buildChart();\n    }\n\n\n\n    \n    buildChart = () => {\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n        const { data, average, labels } = this.props;\n        if (typeof myLineChart !== \"undefined\") myLineChart.destroy();\n\n        \n        myLineChart = new Chart(myChartRef, {\n            type: \"line\",\n            data: {\n                //Bring in data\n                labels: global.Ldate,\n                datasets: [\n                    {\n                        label:'Weight',\n                        data:global.Lweight, \n                        backgroundColor:[\n                            'rgba(255, 99, 132, 0.6)',\n                            'rgba(54, 162, 235, 0.6)',\n                            'rgba(255, 206, 86, 0.6)',\n                            'rgba(75, 192, 192, 0.6)',\n                            'rgba(153, 102, 255, 0.6)',\n                            'rgba(255, 159, 64, 0.6)',\n                            'rgba(255, 99, 132, 0.6)'\n                          ]\n\n                    },\n                    {\n                      label:'Goal',\n                      data:global.allGoalInputs,\n                      backgroundColor:[\n                          'rgba(54, 162, 235, 0.6)',\n                          'rgba(153, 102, 255, 0.6)',\n                          'rgba(255, 206, 86, 0.6)',\n                          'rgba(75, 192, 192, 0.6)',\n                          'rgba(255, 99, 132, 0.6)',\n                          'rgba(255, 159, 64, 0.6)',\n                          'rgba(255, 99, 132, 0.6)'\n                          ]\n                    }\n                ]\n            },\n            options: {\n                //Customize chart options\n                responsive: true,\n                legend: {\n                position: 'bottom'\n                },\n                \n            }\n        });\n    }\n\n\n\n handleAddForm(event)\n  {\n      event.preventDefault();\n      this.setState({\n                      formStatus:\"formStyle\",\n                      weightInput:\"\",\n                      DateInput:\"\"\n                    })\n  }\n\n\n\n  handleOK(event){\n    event.preventDefault();\n    if(this.state.weightInput!==\"\" && this.state.DateInput!==\"\"){\n    global.allWeightInputs=this.state.weightInput\n    global.allDateInputs[global.counter]=this.state.DateInput\n    global.allInputs[global.counter]= { id:\"\", goal:this.state.goalInput, weight:this.state.weightInput, date:this.state.DateInput,}\n\n         axios.post('https://warm-inlet-95424.herokuapp.com/api/stuff', global.allInputs[global.counter])\n       \n    .then(res=> {window.location = '/';}\n)\n   \n\n\n\n\n    global.counter++\n    this.setState({formStatus:\"noDisplay\"                             \n  })\n    global.currentWeight = global.Lweight[global.Lweight.length-1]\n    \n\n  }\n  else{alert(\"one or more fields required\")}\n\n\n    \n\n  }\n\n  handleCancel(event){\n    event.preventDefault();\n    this.setState({formStatus:\"noDisplay\"})\n  }\n\nhandleWeight(event)\n    {\n      this.setState({ weightInput: event.target.value})\n    }\n\nhandleDate(event)\n    {\n      this.setState({ DateInput: event.target.value})\n    }\n\nhandleGoal(event)\n{\n    event.preventDefault();\n      this.setState({ goalInput: event.target.value})\n    \n}\n\nhandleGoalOk(event)\n{\n    event.preventDefault();\n\n\nconst upDatedList={\n    goal:this.state.goalInput,\n  }\n\n\naxios.put('https://warm-inlet-95424.herokuapp.com/api/stuff/'+this.state.todos[this.state.todos.length-1]._id, upDatedList)\n  .then(res=>{window.location = '/';\n});\n\n\n    let i=0\n    for(i=0; i<=global.allInputs.length;i++){global.allGoalInputs[i]=this.state.goalInput}\n    this.setState({goalFormStatus:\"noDisplay\"})\n\n}\n\nhandleGoalButton(event){\n  this.setState({goalFormStatus: \"formStyle\"})\n}\n\n\n\n\n\n\n\n\n    render() {\n        return (\n          <div className=\"App\">\n      <header className=\"App-header\">\n      <div className =\"mainBox\">\n      <h6 className=\"motivation\">If you can conquer yourself, you can conquer Everest</h6>\n      <button className = \"btn\" onClick={this.handleGoalButton}>GOAL: {this.state.goalInput} kg</button>\n      <form className={this.state.goalFormStatus}>\n      <input type=\"text\" name=\"goal\" value={this.state.goalInput} onChange={this.handleGoal}/>\n       <button className=\"formButton\" onClick={this.handleGoalOk} >OK</button>\n      </form>\n\n\n      <button className = \"btn\" onClick={this.handleAddForm}>CURRENT WEIGHT: {this.state.currentWeight} kg </button>\n\n       <form className = {this.state.formStatus}>\n          <h2>{global.currentWeight} kg</h2>\n          <input type=\"text\" name=\"weight\" placeholder=\"Weight\" value={this.state.weightInput} onChange={this.handleWeight}/><br/>\n          <input type=\"date\" name=\"date\" placeholder=\"Date\" value={this.state.DateInput} onChange={this.handleDate}/><br/>\n          <button className=\"formButton\" onClick={this.handleOK}>OK</button>\n          <button className=\"formButton\" onClick={this.handleCancel}>CANCEL</button>\n        </form>\n            <div className={classes.graphContainer}>\n                <canvas\n                    id=\"myChart\"\n                    ref={this.chartRef}\n                />\n            </div>\n            <h6 className ={this.state.currentWeight !==\"\" && this.state.goalInput !==\"\"?\"\":\"noDisplay\"}>{Math.pow((Math.pow((this.state.currentWeight-this.state.goalInput),2)),0.5)}{this.state.currentWeight !==\"\" && this.state.goalInput !==\"\"? \" kg difference remain to reach your goal\": \"\"} </h6>\n      </div>\n        \n      </header>\n    </div>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}